#include<cstdio>
#include<iostream>
#include<map>
#include<vector>
#include<string>
#include<set>
#include<stack>
#include<algorithm>
#include<Windows.h>
#include <fstream>
#include<sstream>
using namespace std;
vector<char>VN;
vector<char>VT;
bool vis_VN[300];
bool vis_VT[300];
bool LL_flag = true;
char c;
char character;
void init_visit()
{
	for (int i = 0; i < 67; i++)
		vis_VN[i] = true;
	for (int i = 0; i < 300; i++)
		vis_VT[i] = true;
}

map<char, vector<string> >mp;//用来存文法 
map<char, set<char> >first;//用来存first集 
map<char, set<char> >follow;//用来存follow集 
map<char, map<char, set<string> > >pretable;//预测分析表 

bool is_VN(char x)//判断是否是非终结符 
{
	if ((int)x >= 1 && (int)x <= 67)
		return true;
	else
		return false;
}

void fun_table(char A, string str)//预测分析表的构建 ,输入非终极符A和其产生的一个右部str
{
	set<char>ans;
	bool tbool = false;
	for (int i = 0; i < str.size(); i++)
	{
		char ch = str[i];
		if (!(is_VN(ch)))//以终结符开头 
		{
			if (ch != 'u')
			{
				ans.insert(ch);
				tbool = true;
			}
			break;
		}
		else
		{
			set<char>::iterator it;
			for (it = first[ch].begin(); it != first[ch].end(); it++) {
				if (*it != 'u')
					ans.insert(*it);
			}
			tbool = true;
			for (int j = 0; j < mp[ch].size(); j++)
			{
				if (mp[ch][j] == "u")//???????
					tbool = false;
			}
			if (tbool) break;
		}
	}
	if (!tbool)
	{
		set<char>::iterator it;
		for (it = follow[A].begin(); it != follow[A].end(); it++) {
			if (*it != 'u')
				ans.insert(*it);
		}
	}
	set<char>::iterator it;
	for (it = ans.begin(); it != ans.end(); it++) {
		pretable[A][*it].insert(str);
	}
}

void fun_first(char A)//处理A的first集 
{
	string flag = "";
	bool empty_flag = true;
	for (int i = 0; i < mp[A].size(); i++)
	{
		flag = mp[A][i];
		for (int flagi = 0; flagi < flag.size(); flagi++)
		{
			char ch = flag[flagi];
			if (!(is_VN(ch)))//以终结符开头 
			{
				first[A].insert(ch);
				empty_flag = false;
				break;
			}
			else
			{
				fun_first(ch);
				set<char>::iterator it;
				for (it = first[ch].begin(); it != first[ch].end(); it++) {
					if (*it != 'u')
						first[A].insert(*it);
				}
				bool tbool = true;
				for (int j = 0; j < mp[ch].size(); j++)
				{
					if (mp[ch][j] == "u")//????
						tbool = false;
				}
				if (tbool)
				{
					empty_flag = false;
					break;
				}
			}
		}
		if (empty_flag)
			first[A].insert('u');
	}
}

void fun_follow(char A)//处理A的follow集
{
	for (int i = 0; i < VN.size(); i++)
	{
		char ch = VN[i];
		for (int j = 0; j < mp[ch].size(); j++)
		{
			string s = mp[ch][j];
			int k = 0;
			for (k = 0; k < s.length(); k++)
			{
				if (s[k] == A)
				{
					if (k == s.length() - 1)//如果A可直接或间接位于ch推导式的末位 ,将ch的follow集加入到A的follow集 
					{
						set<char>::iterator it;
						for (it = follow[ch].begin(); it != follow[ch].end(); it++)
						{
							follow[A].insert(*it);
						}
					}
					else
					{
						if (is_VN(s[k + 1]))//A的下一位是非终结符 
						{
							bool flag2 = false;
							set<char>::iterator it;
							for (it = first[s[k + 1]].begin(); it != first[s[k + 1]].end(); it++) {
								if (*it != 'u')
									follow[A].insert(*it);//将A下一位非终结符的first加入A的follow集 (除去0) 
							}
							for (int t = 0; t < mp[s[k + 1]].size(); t++)
							{
								if (mp[s[k + 1]][t] == "u")//???
									flag2 = true;
							}
							if (flag2)//A下一位非终结符可推倒出0 
								s[k + 1] = A;
						}
						else
						{
							follow[A].insert(s[k + 1]);
						}
					}
				}
			}
		}
	}
}

void show_first_follow()//显示first集和follow集 
{
	cout << "First集如下:" << endl;
	for (int i = 0; i < VN.size(); i++)
	{
		fun_first(VN[i]);
		cout << (int)VN[i] << ": ";
		char tch = VN[i];
		set<char>::iterator it;
		for (it = first[tch].begin(); it != first[tch].end(); it++) {
			cout << (int)*it << " ";
		}
		cout << endl;
	}
	cout << "Follow集如下:" << endl;
	follow[VN[0]].insert('#');
	for (int i = 0; i < VN.size(); i++)
		fun_follow(VN[i]);
	for (int i = 0; i < VN.size(); i++)
	{
		fun_follow(VN[i]);

		cout << (int)VN[i] << ": ";
		char tch = VN[i];
		set<char>::iterator it;
		for (it = follow[tch].begin(); it != follow[tch].end(); it++) {
			cout << (int)*it << " ";
		}
		cout << endl;
	}
}

void show_pretable()//显示预测分析表 
{
	cout << "预测分析表如下:" << endl;
	int x = VN.size() + 1, y = VT.size() + 1;
	int spaceflag = 0;
	for (int i = 1; i <= 2 * x + 1; i++)
	{
		for (int j = 1; j <= 12 * y + 1; j++)
		{
			if (i % 2 == 1)
				cout << '-';
			else
			{
				if (i == 2 && j % 12 == 7 && j > 12)
					cout << VT[j / 12 - 1];
				else
				{
					if (j % 12 == 1)
						cout << '|';
					else if (j == 7 && i > 2)
						cout << VN[i / 2 - 2];
					else
					{
						if (i > 3 && j > 13)
						{
							if (j % 12 == 3)
							{
								int m = i / 2 - 2, n = j / 12 - 1;
								set<string>::iterator it;
								if (!pretable[VN[m]][VT[n]].empty())
								{
									spaceflag -= pretable[VN[m]][VT[n]].size() - 1;
									if (pretable[VN[m]][VT[n]].size() > 1)
										LL_flag = false;
								}
								for (it = pretable[VN[m]][VT[n]].begin(); it != pretable[VN[m]][VT[n]].end(); it++) {
									cout << *it << " ";
									spaceflag -= (*it).size();
								}
								if (spaceflag == 0)
									cout << ' ';

							}
							else
							{
								if (spaceflag == 0)
									cout << ' ';
								else
									spaceflag++;
							}
						}
						else
							cout << ' ';

					}
				}

			}
		}
		cout << endl;
	}

}
/*******************************************************************************/
void check_pretable()	//判断文法是否为LL(1)文法
{
	map<char, map<char, set<string> > >::iterator it;
	for (it = pretable.begin(); it != pretable.end(); it++)
	{
		map<char, set<string> > ::iterator it0;
		for(it0=it->second.begin();it0!=it->second.end();it0++)
			if(it0->second.size()>1)
				LL_flag = false;
	}
}

void controlling()//总控程序+过程显示+错误处理 
{
	string input = "";		//存放输入流中的字符串
	int input_p=0;			//当前在识别哪个字符
	ifstream infile;
	infile.open("input.txt", ios::in);   //将文件流对象与文件连接起来 
	if (infile)
	{
		int c;
		while (!infile.eof())
		{

			infile >> c;
			input += c;
		}
		input += "#";
	}
	else
	{
		cout << "没有找到文件"<<endl;
	}
	infile.close();             //关闭文件输入流 

	stack<char>checkstack;
	string checkstack_copy = "";//输出分析栈用
	checkstack.push('#');
	checkstack_copy += "#";
	checkstack.push(VN[0]);
	checkstack_copy += VN[0];
	char ch;//存放分析栈顶元素
	ch = checkstack.top();

	
	while (ch != '#')
	{
		cout << "分析栈： ";
		for (int j = checkstack_copy.length() - 1; j >= 0; j--)
			if (checkstack_copy[j] == '#')
				cout << "# ";
			else
				cout << (int)checkstack_copy[j] << " ";
		cout << "   输入流： ";
		for (int j = input_p; j < input.length(); j++)
			if((int)input[j]==35)
				cout << "# " << " ";
			else
				cout << (int)input[j] << " ";
		cout << endl;
		if (ch == input[input_p])	//分析栈顶的元素ch 与 输入流元素input[input_p] 相等
		{
			checkstack.pop();
			checkstack_copy = checkstack_copy.substr(0, checkstack_copy.length() - 1);
			input_p++;
			ch= checkstack.top();
		}
		else if (is_VN(ch))	//分析栈顶元素为非终极符
		{
			if (pretable[ch].count(input[input_p]) == 0)	//ch的predict集中没有input[input_p]
			{
				break;
			}
			else
			{
				checkstack.pop();
				checkstack_copy = checkstack_copy.substr(0, checkstack_copy.length() - 1);
				set<string>::const_iterator p = pretable[ch][input[input_p]].cbegin();
				string c = *p;
				for (int i = c.length() - 1; i >= 0; i--)
				{
					if (c[i] != 'u')
					{
						checkstack.push(c[i]);
						checkstack_copy += c[i];
					}
				}
				ch = checkstack.top();
			}
		}
		else
			break;
	}

	cout << "分析栈： ";
	for (int j = checkstack_copy.length() - 1; j >= 0; j--)
		if (checkstack_copy[j] == '#')
			cout << "# ";
		else
			cout << (int)checkstack_copy[j] << " ";
	cout << "   输入流： ";
	for (int j = input_p; j < input.length(); j++)
		if ((int)input[j] == 35)
			cout << "# " << " "<<endl;
		else
			cout << (int)input[j] << " "<<endl;

	if (ch == '#' && input[input_p] == '#')
	{
		cout << "文法分析结果正确" << endl;
	}
	else                     //错误处理(待添加)
	{
		cout << "文法分析结果错误" << endl;
	}
	

	getchar();
}
/******************************************************************************/

int main()
{
	init_visit();
	int k = 1;
	char vn;
	string result;
	ifstream in("test.txt");

	string line;
	if (in) // 有该文件
	{
		while (getline(in, line)) // cin >> vn && vn != 89
		{
			string str;
			stringstream input(line);
			input >> result;//第一个非终极符，也就是左部的string
			vn = atoi(result.c_str());//左部的char
			if ((int)vn == 89) {
				break;
			}
			if (vis_VN[(int)vn - 1] == true)//不重复存vn 
			{
				VN.push_back(vn);
				vis_VN[(int)vn - 1] = false;
			}
			while (input >> result) {
				character = atoi(result.c_str());
				str += character;//右部的字符串，也就是源代码中的str
			}
			mp[vn].push_back(str);
			for (int i = 0; i < str.size(); i++)
			{
				if (!is_VN(str[i]) && vis_VT[(int)str[i]] == true && str[i] != 'u')
				{
					VT.push_back(str[i]);
					vis_VT[(int)str[i]] = false;
				}
			}
		}
	}
	else // 没有该文件
	{
		cout << "no such file" << endl;
	}
	VT.push_back('#');
	sort(VT.begin(), VT.end() - 1);
	show_first_follow();
	for (int i = 0; i < VN.size(); i++)//构建预测分析表 
	{
		for (int j = 0; j < mp[VN[i]].size(); j++)
		{
			fun_table(VN[i], mp[VN[i]][j]);
		}
	}
	//show_pretable();
	check_pretable();
	if (LL_flag)
	{
		cout << "This is a LL(1)" << endl;
		controlling();
		cout << endl;
	}
	else
	{
		cout << "This is not a LL(1)" << endl;
		getchar();
		return 0;
	}
	
}
